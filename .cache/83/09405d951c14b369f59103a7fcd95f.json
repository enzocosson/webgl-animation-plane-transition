{"id":"shaders-wave/vertex.glsl","dependencies":[{"name":"C:\\MAMP\\htdocs\\webgl-animation-plane-transition\\package.json","includedInParent":true,"mtime":1699222355545}],"generated":{"js":"module.exports = \"#define GLSLIFY 1\\nuniform float time;\\nuniform float uProgress;\\nuniform vec2 uResolution;\\nuniform vec2 uQuadSize;\\nuniform vec4 uCorners;\\nvarying vec2 vSize;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n    float PI = 3.1415926535897932384626433832795;\\n    vUv = uv;\\n    float sine = sin(PI * uProgress);\\n    float waves = sine * 0.1 * sin(5. * length(uv) + 15. * uProgress);\\n    vec4 defaultState = modelMatrix * vec4(position, 1.0);\\n    vec4 fullScreenState = vec4(position, 1.0);\\n    fullScreenState.x *= uResolution.x / uQuadSize.x;\\n    fullScreenState.y *= uResolution.y / uQuadSize.y;\\n\\n    float cornersProgress = mix(mix(uCorners.x, uCorners.y, uv.x), mix(uCorners.z, uCorners.w, uv.x), uv.y);\\n\\n    vec4 finalPosition = mix(defaultState, fullScreenState, uProgress + waves);\\n\\n    vSize = mix(uQuadSize, uResolution, uProgress);\\n\\n    gl_Position = projectionMatrix * viewMatrix * finalPosition;\\n}\";"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":1,"column":0},"source":"shaders-wave/vertex.glsl","original":{"line":1,"column":0},"name":"module"},{"generated":{"line":1,"column":6},"source":"shaders-wave/vertex.glsl","original":{"line":1,"column":6}},{"generated":{"line":1,"column":7},"source":"shaders-wave/vertex.glsl","original":{"line":1,"column":7},"name":"exports"},{"generated":{"line":1,"column":14},"source":"shaders-wave/vertex.glsl","original":{"line":1,"column":14}},{"generated":{"line":1,"column":17},"source":"shaders-wave/vertex.glsl","original":{"line":1,"column":15}},{"generated":{"line":1,"column":935},"source":"shaders-wave/vertex.glsl","original":{"line":1,"column":933}}],"sources":{"shaders-wave/vertex.glsl":"module.exports=\"#define GLSLIFY 1\\nuniform float time;\\nuniform float uProgress;\\nuniform vec2 uResolution;\\nuniform vec2 uQuadSize;\\nuniform vec4 uCorners;\\nvarying vec2 vSize;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n    float PI = 3.1415926535897932384626433832795;\\n    vUv = uv;\\n    float sine = sin(PI * uProgress);\\n    float waves = sine * 0.1 * sin(5. * length(uv) + 15. * uProgress);\\n    vec4 defaultState = modelMatrix * vec4(position, 1.0);\\n    vec4 fullScreenState = vec4(position, 1.0);\\n    fullScreenState.x *= uResolution.x / uQuadSize.x;\\n    fullScreenState.y *= uResolution.y / uQuadSize.y;\\n\\n    float cornersProgress = mix(mix(uCorners.x, uCorners.y, uv.x), mix(uCorners.z, uCorners.w, uv.x), uv.y);\\n\\n    vec4 finalPosition = mix(defaultState, fullScreenState, uProgress + waves);\\n\\n    vSize = mix(uQuadSize, uResolution, uProgress);\\n\\n    gl_Position = projectionMatrix * viewMatrix * finalPosition;\\n}\";"},"lineCount":null}},"error":null,"hash":"3005063ea24f9dc145056043dbe0c872","cacheData":{"env":{}}}