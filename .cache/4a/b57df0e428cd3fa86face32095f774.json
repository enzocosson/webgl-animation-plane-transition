{"id":"shaders-wave/fragment.glsl","dependencies":[{"name":"C:\\MAMP\\htdocs\\webgl-animation-plane-transition\\package.json","includedInParent":true,"mtime":1699222355545}],"generated":{"js":"module.exports = \"#define GLSLIFY 1\\nuniform float time;\\nuniform float uProgress;\\nuniform vec2 uTextureSize;\\nuniform sampler2D uTexture;\\nvarying vec2 vUv;\\n\\nvarying vec2 vSize;\\n\\nvec2 getUV(vec2 uv, vec2 textureSize, vec2 quadSize) {\\n    vec2 tempUV = uv - vec2(0.5);\\n\\n    float quadAspect = quadSize.x / quadSize.y;\\n    float textureAspect = textureSize.x / textureSize.y;\\n    if(quadAspect < textureAspect) {\\n        tempUV = tempUV * vec2(quadAspect / textureAspect, 1.);\\n    } else {\\n        tempUV = tempUV * vec2(1., (textureAspect / quadAspect));\\n    }\\n\\n    tempUV += vec2(0.5);\\n    return tempUV;\\n}\\n\\nvoid main() {\\n\\n    vec2 correctUV = getUV(vUv, uTextureSize, vSize);\\n    vec4 myimage = texture(uTexture, correctUV);\\n    gl_FragColor = vec4(vUv, 0., 1.);\\n    gl_FragColor = myimage;\\n}\";"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":1,"column":0},"source":"shaders-wave/fragment.glsl","original":{"line":1,"column":0},"name":"module"},{"generated":{"line":1,"column":6},"source":"shaders-wave/fragment.glsl","original":{"line":1,"column":6}},{"generated":{"line":1,"column":7},"source":"shaders-wave/fragment.glsl","original":{"line":1,"column":7},"name":"exports"},{"generated":{"line":1,"column":14},"source":"shaders-wave/fragment.glsl","original":{"line":1,"column":14}},{"generated":{"line":1,"column":17},"source":"shaders-wave/fragment.glsl","original":{"line":1,"column":15}},{"generated":{"line":1,"column":821},"source":"shaders-wave/fragment.glsl","original":{"line":1,"column":819}}],"sources":{"shaders-wave/fragment.glsl":"module.exports=\"#define GLSLIFY 1\\nuniform float time;\\nuniform float uProgress;\\nuniform vec2 uTextureSize;\\nuniform sampler2D uTexture;\\nvarying vec2 vUv;\\n\\nvarying vec2 vSize;\\n\\nvec2 getUV(vec2 uv, vec2 textureSize, vec2 quadSize) {\\n    vec2 tempUV = uv - vec2(0.5);\\n\\n    float quadAspect = quadSize.x / quadSize.y;\\n    float textureAspect = textureSize.x / textureSize.y;\\n    if(quadAspect < textureAspect) {\\n        tempUV = tempUV * vec2(quadAspect / textureAspect, 1.);\\n    } else {\\n        tempUV = tempUV * vec2(1., (textureAspect / quadAspect));\\n    }\\n\\n    tempUV += vec2(0.5);\\n    return tempUV;\\n}\\n\\nvoid main() {\\n\\n    vec2 correctUV = getUV(vUv, uTextureSize, vSize);\\n    vec4 myimage = texture(uTexture, correctUV);\\n    gl_FragColor = vec4(vUv, 0., 1.);\\n    gl_FragColor = myimage;\\n}\";"},"lineCount":null}},"error":null,"hash":"21b1238ac409cf3c18122b3e46e62eb2","cacheData":{"env":{}}}